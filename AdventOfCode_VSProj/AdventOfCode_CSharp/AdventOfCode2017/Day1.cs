using System.Collections.Generic;
using System.Linq;

namespace AdventOfCode_CSharp.AdventOfCode2017
{
    class Day1
    {
        static readonly string[] inputs_part1 = new string[] 
        {
            "1122",     //3
            "1111",     //4
            "1234",     //0
            "91212129", //9

            // Puzzle Input
            // 1049

        };

        static readonly string[] inputs_part2 = new string[]
{
            "1212",     //6
            "1221",     //0
            "123425",   //4
            "123123",   //12
            "12131415", //4

            // Puzzle Input
            // 1508

};

        public static void RunDay1()
        {
            // Part 1
            foreach (var input in inputs_part1)
            {
                int forwardMatchingSteps = 1;
                int answer = GetDigitsMatchNextDigitXStepsForward(DigitsToIntSequence(input), forwardMatchingSteps).Sum();

                System.Diagnostics.Debug.WriteLine("Answer of {0}: {1}", input, answer);
            }

            // Part 2
            foreach (var input in inputs_part2)
            {
                List<int> inputSequence = DigitsToIntSequence(input);
                int forwardMatchingSteps = inputSequence.Count / 2;
                int answer = GetDigitsMatchNextDigitXStepsForward(inputSequence, forwardMatchingSteps).Sum();

                System.Diagnostics.Debug.WriteLine("Answer of {0}: {1}", input, answer);
            }
        }

        private static List<int> DigitsToIntSequence(string digits)
        {
            // string "1122" -> int[] 1,1,2,2

            List<int> intSequence = new List<int>();
            foreach (var digit in digits)
            {
                intSequence.Add(int.Parse(digit.ToString()));
            }
            return intSequence;
        }

        private static List<int> GetDigitsMatchNextDigitXStepsForward(List<int> circularSequence, int forwardMatchingSteps)
        {
            int sequenceLength = circularSequence.Count;

            List<int> matchedDigits = new List<int>();
            for (int i = 0; i < circularSequence.Count; ++i)
            {
                int currentDigitIndex = GetModIndex(i, sequenceLength);
                int examinedDigitIndex = GetModIndex(i + forwardMatchingSteps, sequenceLength);

                // Digit matches next digit X steps forward
                if (circularSequence[currentDigitIndex] == circularSequence[examinedDigitIndex])
                {
                    matchedDigits.Add(circularSequence[currentDigitIndex]);
                }
            }
            return matchedDigits;
        }

        private static int GetModIndex(int index, int sequenceLength)
        {
            // x [1 2 3 4]    index       0  1  2  3  4  5  6  7  8  9
            //                mod index   0  1  2  3  0  1  2  3  0  1

            return index % sequenceLength;
        }
    }

}
